CHANGELOG
========================================


PHASE 3 CHANGES
========================================

1.  Corrected spelling mistakes and other typos in the test files

2.  Added test files for the new test cases such as "quit" and 
    buy transaction where the event and seller username are correct
    but seller is not selling tickets to the event...

3.  Every applicable test case needed to have the following added

    + Current user accounts file read successfully.
    + Available tickets file read successfully.

    and at the end

    >

4.  Had to add a custom get_input method which is almost identical to the built-in
    getline function except that it looks ahead in the buffer and throws an EOF_INPUT
    exception which is caught before the program is terminated by the parent shell.

    This results in the front end producing output that matches our initially intended
    test case output files.

5.  Had test cases which had incorrect cua, dtf, atf files that were accidentally
    copied and renamed.

6.  Had to make corrections to the create test cases, where necessary input instructions
    (logout), which are needed in order for the daily transaction file to be created
    had been left out

7.  Corrected output files to match the exception messages in front end which were worded
    differently or modified in the front end. Such as having two similarly worded error
    messages combined into one error message, or error messages that were re-worded

    --> For example delete_2.out, now the message just says "User deleted successfully." 

8.  Had to correct test cases which were accidentally copied, (ie. delete_5.inp) which was
    copied from delete_4.inp (deleting yourself test case) and obviously broke the test case


9.  ACTUAL BUGS IN FRONT END FOUND, test cases sell_11 and sell_21 found actual bugs in the front
    end based on the requirements, there was no error checking for dollar input to verify that
    it contained decimal (e.g. 10 would not cause an error, when it really needed to be 10.00)

    Sell_21 caught a bug in the front end where I had forgot to add support for one sell transaction
    per session.

    --> Both of these required updating the front end source code.  

10. Added a new test case, sell_22 which verifies that tickets can be sold over multiple new sessions.

11. Test case refund_12 revealed a bug in the software, the actual limit for the test case is
    999,999.99 not $1000.00, the front end had to be updated to correct the issue and display
    a new error message. As well the test case output for refund_12 had to be corrected.

12.  Had to update the test case dependencies for many of the buy
     test cases due to the fact that irrelevant (backend-specific)
     tests were removed which offset the numbering.

     --> Added a new test case, buy_17_1, (buy 17.1)




PHASE 5 Changes
========================================

Failed Test Cases
----------------------------------------

These are test cases that failed and as a result found bugs in the
backend

1.  RefundTest.testExecute4() found a bounds error in the Refund
    class where the following line was incorrect

    if (cua.getUser(seller).getCredit() - credit > 0.00)

    It would fail saying that a user had negative credit even if
    the result was just a credit of 0.00


2.  For the parse method did a code cleanup by changing the following code
        snippet to the following

    while ((line = reader.readLine()) != null)
    {
        /* Stop if END of file reached */
        if (reEnd.matcher(line).matches())
        {
            break;
        }

            ...


        TO

    while ((line = reader.readLine()) != null && !reEnd.matcher(line).matches())
    {


    Which removed a break statement and made it one of the conditions to the while
    loop instead

3.  Removed redundant code for checking if the file exists as there is already a
        handle to the file in the short window between when it has been read and then
        written to.

        *** REMOVED THE FOLLOWING ***

    /* Create the file if it does not exist since parsed */
    if (!file.exists())
    {
        file.createNewFile();
    }

4.  Used the test statement coverage tool to find any areas of code that were not covered 
        unit tests, it found that the following in DailyTransactions.java

    /* If buyer is found in lookahead, add transaction with buyer's name */
    if (match.matches())
    {
        transactions.add(new Buy(event, match.group(2), seller, volume, price, entry));
    }

        
        Was not initially covered by DailyTransactionsTest.testParse7() because
        the test input file used did not contain a logout transaction, which
        the lookahead was looking for.


5.  Discuss the deficencies of ECLEmma statement coverage tool used as
        well as the statement coverage report (it IS 100% coverage but the
        tool fails to identify tests that use external JUnit libraries in
        order to properly have statement coverage for BackEnd.main()


6.  Decision coverage was implemented for the execute() method in the Delete
        class, the single if condition in the method was evaluted to both true
        and false by tests testDecision1() and testDecision2() to ensure full
        decision coverage.

7.  Loop coverage was implemented for the hasUser method in the CurrentUserAccounts
        class, provides loop coverage for zero, once, twice, and many executions
        of the body of the loop.
