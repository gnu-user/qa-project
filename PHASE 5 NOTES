PHASE 5 NOTES
==============================

Failed Test Cases
-------------------------------

These are test cases that failed and as a result found bugs in the
backend

1.	RefundTest.testExecute4() found a bounds error in the Refund
	class where the following line was incorrect

	if (cua.getUser(seller).getCredit() - credit > 0.00)

	It would fail saying that a user had negative credit even if
	the result was just a credit of 0.00


2.	For the parse method did a code cleanup by changing the following code
		snippet to the following

    while ((line = reader.readLine()) != null)
    {
        /* Stop if END of file reached */
        if (reEnd.matcher(line).matches())
        {
            break;
        }

			...


		TO

    while ((line = reader.readLine()) != null && !reEnd.matcher(line).matches())
    {


	Which removed a break statement and made it one of the conditions to the while
	loop instead

3.	Removed redundant code for checking if the file exists as there is already a
		handle to the file in the short window between when it has been read and then
		written to.

		*** REMOVED THE FOLLOWING ***

    /* Create the file if it does not exist since parsed */
    if (!file.exists())
    {
        file.createNewFile();
    }

4.	Used the test statement coverage tool to find any areas of code that were not covered 
		unit tests, it found that the following in DailyTransactions.java

    /* If buyer is found in lookahead, add transaction with buyer's name */
    if (match.matches())
    {
        transactions.add(new Buy(event, match.group(2), seller, volume, price, entry));
    }

		
		Was not initially covered by DailyTransactionsTest.testParse7() because
		the test input file used did not contain a logout transaction, which
		the lookahead was looking for.


5.	Discuss the deficencies of ECLEmma statement coverage tool used as
		well as the statement coverage report (it IS 100% coverage but the
		tool fails to identify tests that use external JUnit libraries in
		order to properly have statement coverage for BackEnd.main()


6.	Decision coverage was implemented for the execute() method in the Delete
		class, the single if condition in the method was evaluted to both true
		and false by tests testDecision1() and testDecision2() to ensure full
		decision coverage.

7.	Loop coverage was implemented for the hasUser method in the CurrentUserAccounts
		class, provides loop coverage for zero, once, twice, and many executions
		of the body of the loop.
